package com.hudl.myfirstapp;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import android.content.Intent;
import android.content.res.AssetManager;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.TextView;

import com.hudl.workout.ImportPrefs;
import com.hudl.workout.WorkoutGenerator;
import com.hudl.workout.datacontainer.WorkoutConstraints;
import com.hudl.workout.datacontainer.WorkoutPrefs;
import com.hudl.workout.datacontainer.WorkoutSet;

public class DisplayWorkoutActivity extends ActionBarActivity
{

	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_display_workout);
		
		Intent intent = getIntent();
		WorkoutPrefs workoutPrefs = (WorkoutPrefs) intent.getSerializableExtra(MainActivity.WORKOUT_PREFERENCES);
		HashMap<Integer, WorkoutConstraints> workoutConstraints = readWorkoutConstraints(workoutPrefs);
		ArrayList<WorkoutSet> mainSets = generateWorkout(workoutPrefs, workoutConstraints);
		
		TextView totalCounTextView = (TextView) findViewById(R.id.txtViewTotalCountdown);
		totalCounTextView.setText(Integer.toString(workoutPrefs.getTime()));

		TextView setCountTextView = (TextView) findViewById(R.id.txtViewSetCountdown);
		setCountTextView.setText(Integer.toString(mainSets.get(0).getTotalSetTime()));
		
		CountDownTimer totalWorkoutTimer = setupTimer(mainSets);
		totalWorkoutTimer.start();
	}

	private CountDownTimer setupTimer(ArrayList<WorkoutSet> workoutSets)
	{
		int totalWorkoutTime = 0;
		
		for (WorkoutSet currentSet : workoutSets)
		{
			totalWorkoutTime += currentSet.getTotalSetTime();
		}
		
		WorkoutCountDownTimer totalWorkoutTimer = new WorkoutCountDownTimer(totalWorkoutTime * 1000, 1000, workoutSets);
		
		return totalWorkoutTimer;
	}
	
	private HashMap<Integer, WorkoutConstraints> readWorkoutConstraints(WorkoutPrefs workoutPrefs)
	{
		AssetManager assetManager = this.getAssets();
    	
    	HashMap<Integer, WorkoutConstraints> constraints = new HashMap<Integer, WorkoutConstraints>();
		try {
			constraints = ImportPrefs.ReadWorkoutconstraints(assetManager.open("WorkoutConfig.properties"));
		} catch (IOException e) {

			e.printStackTrace();
		}
		
		return constraints;
	}
	
	private ArrayList<WorkoutSet> generateWorkout(WorkoutPrefs workoutPrefs, HashMap<Integer, WorkoutConstraints> workoutConstraints)
	{
		WorkoutGenerator generator = new WorkoutGenerator(workoutConstraints, workoutPrefs);
		ArrayList<WorkoutSet> mainSets = generator.generateMainSets();
		
		int totalWorkoutTime = 0;
		for (WorkoutSet mainSet : mainSets) 
		{
			System.out.println(mainSet.toString());
			totalWorkoutTime += mainSet.getTotalSetTime();
		}
		System.out.println("Total workout time is: " + totalWorkoutTime/60 + " minutes");
		
		return mainSets;
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.display_workout, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	public class WorkoutCountDownTimer extends CountDownTimer
	{
		ArrayList<WorkoutSet> mainSets = new ArrayList<WorkoutSet>();
		WorkoutSet currentSet = null;
		private long timeLeftExcludingCurrentRep;
		private int currentSetIndex = 0;
		private boolean isWorkingSet = true;
		private int currentRepNum = 1;
		
		public WorkoutCountDownTimer(long millisInFuture, long countDownInterval, ArrayList<WorkoutSet> mainSets) {
			super(millisInFuture, countDownInterval);
			this.mainSets = mainSets;
			this.timeLeftExcludingCurrentRep = millisInFuture;
			currentSet = mainSets.get(0);
			TextView totalCounTextView = (TextView) findViewById(R.id.txtViewTotalCountdown);
			totalCounTextView.setText(String.valueOf(millisInFuture/1000));
			TextView repCountTextView = (TextView) findViewById(R.id.txtViewSetCountdown);
			repCountTextView.setText(String.valueOf(currentSet.getTimePerRep()/1000));
		}

		@Override
		public void onTick(long millisUntilFinished) {
			TextView totalCounTextView = (TextView) findViewById(R.id.txtViewTotalCountdown);
			totalCounTextView.setText(String.valueOf(millisUntilFinished/1000));

			TextView repCountTextView = (TextView) findViewById(R.id.txtViewSetCountdown);
			long remainingRepTime = timeLeftExcludingCurrentRep - millisUntilFinished;
			
			if(remainingRepTime <= 0)
			{
				if(isWorkingSet)
				{
					this.timeLeftExcludingCurrentRep -= this.currentSet.getTimePerRep();
					remainingRepTime = currentSet.getRestTimePerRep();
					isWorkingSet = false;
				}
				else
				{
					this.timeLeftExcludingCurrentRep -= this.currentSet.getRestTimePerRep();
					isWorkingSet = true;

					currentRepNum++;
					if(currentRepNum <= currentSet.getNumberOfReps())
					{
						remainingRepTime = currentSet.getTimePerRep();
					}
					else
					{
						currentSetIndex++;
						currentRepNum = 1;
						//just a safety precaution. This should never happen
						if(mainSets.size() < currentSetIndex)
						{
							currentSet = mainSets.get(currentSetIndex);
							remainingRepTime = currentSet.getTimePerRep();
						}
					}
				}
			}
			
			repCountTextView.setText(String.valueOf(remainingRepTime/1000));
		}

		@Override
		public void onFinish() {
			TextView totalCounTextView = (TextView) findViewById(R.id.txtViewTotalCountdown);
			totalCounTextView.setText("Done!");

		}

		public ArrayList<WorkoutSet> getMainSets() {
			return mainSets;
		}

		public void setMainSet(ArrayList<WorkoutSet> mainSets) {
			this.mainSets = mainSets;
		}

	}
}
