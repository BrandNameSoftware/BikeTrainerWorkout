package com.hudl.workout;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

import com.hudl.workout.datacontainer.WorkoutConstraints;
import com.hudl.workout.datacontainer.WorkoutPrefs;
import com.hudl.workout.datacontainer.WorkoutSet;
import com.hudl.workout.utils.WorkoutMaths;

public class WorkoutGenerator
{
	//inputs
	private HashMap<Integer, WorkoutConstraints> workoutConstraints;
	private WorkoutPrefs workoutPrefs;
	
	//generated data
	private static double bonusRoundPercentage = .15;
	private int minutesInTargetZone;
	private int minutesInBonusZone;


	public WorkoutGenerator(HashMap<Integer, WorkoutConstraints> workoutConstraints, WorkoutPrefs workoutPrefs)
	{
		this.workoutConstraints = workoutConstraints;
		this.workoutPrefs = workoutPrefs;
	}

	public ArrayList<WorkoutSet> generateMainSets()
	{
		ArrayList<WorkoutSet> mainSets = new ArrayList<WorkoutSet>();
		mainSets.addAll(generateTargetZoneSets());
		mainSets.addAll(generateBonusRoundSets());
		return mainSets;
	}
	
	private ArrayList<WorkoutSet> generateTargetZoneSets()
	{
		ArrayList<WorkoutSet> targetZoneSets = new ArrayList<WorkoutSet>();
		
		this.minutesInTargetZone = (int) Math.round(this.workoutPrefs.getTime() * (1-bonusRoundPercentage));
		
		int remainingTimeInWorkout = this.minutesInTargetZone;
		
		WorkoutConstraints targetZone = this.workoutConstraints.get(this.workoutPrefs.getZone());
		
		while(remainingTimeInWorkout >= targetZone.getMinRepTime())
		{
			int numberOfReps;
			
			numberOfReps = WorkoutMaths.randInt(targetZone.getMinReps(), targetZone.getMaxReps());
			
			int upperBoundsOnWorkout = (targetZone.getMaxRepTime() * numberOfReps > remainingTimeInWorkout)? remainingTimeInWorkout : targetZone.getMaxRepTime();
			WorkoutSet currentWorkoutSet = generateSingleZoneSet(numberOfReps, targetZone, upperBoundsOnWorkout);
			currentWorkoutSet.setTargetZone(this.workoutPrefs.getZone());
			
			//last set might have gone over. Adjust constraints so that we guaranteee it will fall under. This is a shitty hack, there has to be a better way
			if(currentWorkoutSet.getTotalSetTime() > remainingTimeInWorkout)
			{
				int newUpperBoundsOnWorkout = upperBoundsOnWorkout/numberOfReps;
				//reduce the reps until our uppwer bound is higher than our lower bound
				while(newUpperBoundsOnWorkout < targetZone.getMinRepTime())
				{
					numberOfReps--;
					newUpperBoundsOnWorkout = upperBoundsOnWorkout/numberOfReps;
				}
				currentWorkoutSet = generateSingleZoneSet(numberOfReps, targetZone, newUpperBoundsOnWorkout);
			}

			targetZoneSets.add(currentWorkoutSet);
			remainingTimeInWorkout -= currentWorkoutSet.getTotalSetTime();
		}
		
		return targetZoneSets;
	}
	
	private ArrayList<WorkoutSet> generateBonusRoundSets()
	{
		ArrayList<WorkoutSet> bonusRoundSets = new ArrayList<WorkoutSet>();
		
		this.minutesInBonusZone = this.workoutPrefs.getTime() - this.minutesInTargetZone;
		
		int remainingTimeInRound = minutesInBonusZone;
		int randomZone = WorkoutMaths.randInt(2, 7);
		
		WorkoutConstraints targetZone = this.workoutConstraints.get(randomZone);
		
		while(remainingTimeInRound >= targetZone.getMinRepTime())
		{
			int numberOfReps;
			
			numberOfReps = WorkoutMaths.randInt(targetZone.getMinReps(), targetZone.getMaxReps());
			
			int upperBoundsOnWorkout = (targetZone.getMaxRepTime() * numberOfReps > remainingTimeInRound)? remainingTimeInRound : targetZone.getMaxRepTime();
			WorkoutSet currentWorkoutSet = generateSingleZoneSet(numberOfReps, targetZone, upperBoundsOnWorkout);
			
			//last set might have gone over. Adjust constraints so that we guaranteee it will fall under. This is a shitty hack, there has to be a better way
			if(currentWorkoutSet.getTotalSetTime() > remainingTimeInRound)
			{
				int newUpperBoundsOnWorkout = upperBoundsOnWorkout/numberOfReps;
				//reduce the reps until our uppwer bound is higher than our lower bound
				while(newUpperBoundsOnWorkout < targetZone.getMinRepTime())
				{
					numberOfReps--;
					newUpperBoundsOnWorkout = upperBoundsOnWorkout/numberOfReps;
				}
				currentWorkoutSet = generateSingleZoneSet(numberOfReps, targetZone, newUpperBoundsOnWorkout);
			}

			bonusRoundSets.add(currentWorkoutSet);
			remainingTimeInRound -= currentWorkoutSet.getTotalSetTime();
		}
		
		return bonusRoundSets;
	}
	
	private WorkoutSet generateSingleZoneSet(int numberOfReps, WorkoutConstraints targetConstraints, int maxTimePerSet)
	{
		WorkoutSet currentWorkoutSet = new WorkoutSet();
		int timePerRep, restTimePerRep, totalSetWorkoutTime;
		
		timePerRep = WorkoutMaths.randInt(targetConstraints.getMinRepTime(), maxTimePerSet);
		restTimePerRep = (int) Math.round(timePerRep * targetConstraints.getRestRatio());
		totalSetWorkoutTime = numberOfReps * (timePerRep + restTimePerRep);
		
		currentWorkoutSet.setNumberOfReps(numberOfReps);
		currentWorkoutSet.setRestTimePerRep(restTimePerRep);
		currentWorkoutSet.setTimePerRep(timePerRep);
		currentWorkoutSet.setTotalSetTime(totalSetWorkoutTime);
		
		return currentWorkoutSet;
	}
	
	public HashMap<Integer, WorkoutConstraints> getWorkoutConstraints() {
		return workoutConstraints;
	}

	public void setWorkoutConstraints(HashMap<Integer, WorkoutConstraints> workoutConstraints) {
		this.workoutConstraints = workoutConstraints;
	}
	
	public WorkoutPrefs getWorkoutPrefs() {
		return workoutPrefs;
	}

	public void setWorkoutPrefs(WorkoutPrefs workoutPrefs) {
		this.workoutPrefs = workoutPrefs;
	}

	public static double getBonusRoundPercentage() {
		return bonusRoundPercentage;
	}

	public static void setBonusRoundPercentage(double bonusRoundPercentage) {
		WorkoutGenerator.bonusRoundPercentage = bonusRoundPercentage;
	}

	public int getMinutesInTargetZone() {
		return minutesInTargetZone;
	}

	public void setMinutesInTargetZone(int minutesInTargetZone) {
		this.minutesInTargetZone = minutesInTargetZone;
	}
}
